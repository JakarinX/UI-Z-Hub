local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Residence Massacre - Kirby hub ",
    SubTitle = "Last updated April 1 2024",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    General = Window:AddTab({ Title = "General", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
}

local Options = Fluent.Options

do 
    -- bypassed by Kirby hub
    repeat task.wait() until game:IsLoaded()

    local function isAdonisAC(table)
        return rawget(table, "Detected") and typeof(rawget(table, "Detected")) == "function" and rawget(table, "RLocked")
    end

    warn("https://discord.gg/BJGq7QqRwn")

    for _, v in next, getgc(true) do
        if typeof(v) == "table" and isAdonisAC(v) then

            for i, v in next, v do
                warn(print, i, typeof(v))
                if rawequal(i, "Detected") then

                    local old;
                    old = hookfunction(v, function(action, info, nocrash)
                        if rawequal(action, "_") and rawequal(info, "_") and rawequal(nocrash, true) then

                            return old(action, info, nocrash)
                        end

                        return task.wait(9e9)
                    end)
                    warn("bypassed adonis ac")
                    break
                end
            end
        end
    end

    local antiCheatBypass; antiCheatBypass = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
    
        if string.lower(method) == "kick" then
            return task.wait(9e9)
        end
    
        if string.lower(method) == "fireserver" then
            if string.lower(self.Name) == "kick" then
                return task.wait(9e9)
            end
        end
    
        return antiCheatBypass(self, ...)
    end)
    
    print("sucessfully bypassed client-sided anti-cheat")

    -- General
    -- Player Actions
    local section = Tabs.General:AddSection("Player Actions")
    
    -- Fullbright
    local function EnableFullBright()
        _G.FullBrightEnabled = true
        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 12
        game:GetService("Lighting").FogEnd = 786543
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
    end

    local function DisableFullBright()
        _G.FullBrightEnabled = false
        if _G.NormalLightingSettings then
            local normalSettings = _G.NormalLightingSettings
            game:GetService("Lighting").Brightness = normalSettings.Brightness
            game:GetService("Lighting").ClockTime = normalSettings.ClockTime
            game:GetService("Lighting").FogEnd = normalSettings.FogEnd
            game:GetService("Lighting").GlobalShadows = normalSettings.GlobalShadows
            game:GetService("Lighting").Ambient = normalSettings.Ambient
        end
    end

    local Toggle = Tabs.General:AddToggle("MyFullbright", {Title = "Fullbright", Default = false })

    Toggle:OnChanged(function(isEnabled)
        if isEnabled then
            EnableFullBright()
        else
            DisableFullBright()
        end
    end)

    if not _G.FullBrightExecuted then
        _G.FullBrightEnabled = false

        _G.NormalLightingSettings = {
            Brightness = game:GetService("Lighting").Brightness,
            ClockTime = game:GetService("Lighting").ClockTime,
            FogEnd = game:GetService("Lighting").FogEnd,
            GlobalShadows = game:GetService("Lighting").GlobalShadows,
            Ambient = game:GetService("Lighting").Ambient
        }

        game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
            if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
                _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Brightness = 1
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
            if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
                _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").ClockTime = 12
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
            if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
                _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").FogEnd = 786543
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
            if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
                _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").GlobalShadows = false
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
            if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
                _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
            end
        end)

        _G.FullBrightExecuted = true
    end  

    -- Player Properties
    local section = Tabs.General:AddSection("Player Properties")

    -- Player Speed
    local function WalkSpeedChange(speed)
        local speaker = game.Players.LocalPlayer
        if speaker then
            local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
            local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
            if Char and Human then
                Human.WalkSpeed = speed
            end
        end
    end
    
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "Player Speed",
        Description = "Adjust the player's speed if you walk faster than normal Your speed will return to normal while running.",
        Default = 16,
        Min = 16,
        Max = 100,
        Rounding = 1,
        Callback = function(Value)
            WalkSpeedChange(Value)
        end
    })

    -- field of view
    local Camera = workspace.CurrentCamera
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "field of view",
        Description = "This is a slider",
        Default = 70,
        Min = 70,
        Max = 120,
        Rounding = 1,
        Callback = function(Value)
            Camera.FieldOfView = Value
            print("Field of view set to:", Value)
        end
    })

end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Kirby hub",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
