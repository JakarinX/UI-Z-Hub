local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- FAWGAFAWFA56456465fawffaw56a56

local Window = Fluent:CreateWindow({
    Title = "Rainbow Friends - Kirby hub ",
    SubTitle = "6/4/2567",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    General = Window:AddTab({ Title = "General", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
}

local Options = Fluent.Options

do
    -- General
    -- Player Actions
    local section = Tabs.General:AddSection("Player Actions")

    -- Fullbright
    local function EnableFullBright()
        _G.FullBrightEnabled = true
        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 12
        game:GetService("Lighting").FogEnd = 786543
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
    end

    local function DisableFullBright()
        _G.FullBrightEnabled = false
        if _G.NormalLightingSettings then
            local normalSettings = _G.NormalLightingSettings
            game:GetService("Lighting").Brightness = normalSettings.Brightness
            game:GetService("Lighting").ClockTime = normalSettings.ClockTime
            game:GetService("Lighting").FogEnd = normalSettings.FogEnd
            game:GetService("Lighting").GlobalShadows = normalSettings.GlobalShadows
            game:GetService("Lighting").Ambient = normalSettings.Ambient
        end
    end

    local Toggle = Tabs.General:AddToggle("MyFullbright", {Title = "Fullbright", Default = false })

    Toggle:OnChanged(function(isEnabled)
        if isEnabled then
            EnableFullBright()
        else
            DisableFullBright()
        end
    end)

    if not _G.FullBrightExecuted then
        _G.FullBrightEnabled = false

        _G.NormalLightingSettings = {
            Brightness = game:GetService("Lighting").Brightness,
            ClockTime = game:GetService("Lighting").ClockTime,
            FogEnd = game:GetService("Lighting").FogEnd,
            GlobalShadows = game:GetService("Lighting").GlobalShadows,
            Ambient = game:GetService("Lighting").Ambient
        }

        game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
            if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
                _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Brightness = 1
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
            if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
                _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").ClockTime = 12
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
            if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
                _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").FogEnd = 786543
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
            if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
                _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").GlobalShadows = false
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
            if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
                _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
            end
        end)

        _G.FullBrightExecuted = true
    end

    -- Infinite Jump
    local UserInputService = game:GetService("UserInputService")
    local speaker = game.Players.LocalPlayer.Character
    local infJumpDebounce = false
    local infJump
    
    local function ToggleInfiniteJump(enabled)
        if enabled then
            if infJump then infJump:Disconnect() end
            infJumpDebounce = false
            infJump = UserInputService.JumpRequest:Connect(function()
                if not infJumpDebounce then
                    infJumpDebounce = true
                    speaker:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    wait()
                    infJumpDebounce = false
                end
            end)
        else
            if infJump then infJump:Disconnect() end
            infJumpDebounce = false
        end
    end
    
    local Toggle = Tabs.General:AddToggle("MyInfiniteJump", {Title = "Infinite Jump", Default = false})
    
    Toggle:OnChanged(function(enabled)
        ToggleInfiniteJump(enabled)
    end) 

    local RunService = game:GetService("RunService") -- Ensure RunService is available
    local Noclipping = nil
    local Clip = true -- Set Clip to true by default
    local floatName = "SomeFloatName" -- Define floatName, which seems to be used in your script
    
    local function NoclipLoop(speaker) -- Pass 'speaker' as an argument to the function
        if Clip == false and speaker.Character then
            for _, child in ipairs(speaker.Character:GetDescendants()) do
                if child:IsA("BasePart") and child.CanCollide then -- No need to check for equality to true
                    child.CanCollide = false
                end
            end
        end
    end
    
    -- Connect NoclipLoop function to RunService.Stepped event
    Noclipping = RunService.Stepped:Connect(function()
        local player = game.Players.LocalPlayer -- Assuming you're working with the local player
        if player then
            NoclipLoop(player)
        end
    end)
    
    -- Function to stop the noclip and set Clip to true
    local function StopNoclip()
        if Noclipping then
            Noclipping:Disconnect() -- Disconnect the Noclipping event
        end
        Clip = true
    end
    
    -- Example of how you might use a toggle UI element
    local Toggle = Tabs.General:AddToggle("MyNoclip", {Title = "Noclip", Default = false})
    
    Toggle:OnChanged(function(enabled)
        if enabled then
            Clip = false -- Enable noclip by setting Clip to false
        else
            StopNoclip() -- Call the function to stop noclip if the toggle is disabled
        end
    end)    

    -- Player Properties
    local section = Tabs.General:AddSection("Player Properties")

    -- Player Speed
    local function WalkSpeedChange(speed)
        local speaker = game.Players.LocalPlayer
        if speaker then
            local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
            local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
            if Char and Human then
                Human.WalkSpeed = speed
            end
        end
    end
    
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "Player Speed",
        Description = "Adjust the player's speed",
        Default = 16,
        Min = 16,
        Max = 200,
        Rounding = 1,
        Callback = function(Value)
            WalkSpeedChange(Value)
        end
    })

    -- Jump Power
    local jpower = 50

    local function setJumpPower(value)
        local speaker = game.Players.LocalPlayer
        if speaker.Character and speaker.Character:FindFirstChildOfClass('Humanoid') then
            if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
                speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = value
            else
                speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight = value
            end
        end
    end
    
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "Jump Power",
        Description = "Adjust the player's jump power",
        Default = 50,
        Min = 50,
        Max = 200,
        Rounding = 1,
        Callback = function(value)
            jpower = value
            setJumpPower(jpower)
        end
    })
    

    -- field of view
    local Camera = workspace.CurrentCamera
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "field of view",
        Description = "This is a slider",
        Default = 70,
        Min = 70,
        Max = 120,
        Rounding = 1,
        Callback = function(Value)
            Camera.FieldOfView = Value
            print("Field of view set to:", Value)
        end
    })
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
