local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "The Mimic - Kirby hub ",
    SubTitle = "version 1.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    General = Window:AddTab({ Title = "General", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Kirby hub",
        Content = "This is a notification",
        SubContent = "The Kirby Hub script was successfully.",
        Duration = 5
    })


-- General
    -- Player Actions
    local section = Tabs.General:AddSection("Player Actions")

    -- Function to enable full bright effect
    local function EnableFullBright()
        _G.FullBrightEnabled = true
        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 12
        game:GetService("Lighting").FogEnd = 786543
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
    end

    -- Function to disable full bright effect
    local function DisableFullBright()
        _G.FullBrightEnabled = false
        if _G.NormalLightingSettings then
            local normalSettings = _G.NormalLightingSettings
            game:GetService("Lighting").Brightness = normalSettings.Brightness
            game:GetService("Lighting").ClockTime = normalSettings.ClockTime
            game:GetService("Lighting").FogEnd = normalSettings.FogEnd
            game:GetService("Lighting").GlobalShadows = normalSettings.GlobalShadows
            game:GetService("Lighting").Ambient = normalSettings.Ambient
        end
    end

    -- Toggle function to switch full bright effect on or off
    local function ToggleFullBright(isEnabled)
        if isEnabled then
            EnableFullBright()
        else
            DisableFullBright()
        end
    end

    -- Add the toggle
    local Toggle = Tabs.General:AddToggle("MyFullbright", {Title = "Fullbright", Default = false })

    -- Event handler for toggle change
    Toggle:OnChanged(function(isEnabled)
        ToggleFullBright(isEnabled)
    end)

    if not _G.FullBrightExecuted then
        _G.FullBrightEnabled = false

        _G.NormalLightingSettings = {
            Brightness = game:GetService("Lighting").Brightness,
            ClockTime = game:GetService("Lighting").ClockTime,
            FogEnd = game:GetService("Lighting").FogEnd,
            GlobalShadows = game:GetService("Lighting").GlobalShadows,
            Ambient = game:GetService("Lighting").Ambient
        }

        game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
            if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
                _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Brightness = 1
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
            if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
                _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").ClockTime = 12
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
            if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
                _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").FogEnd = 786543
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
            if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
                _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").GlobalShadows = false
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
            if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
                _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
            end
        end)

        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 12
        game:GetService("Lighting").FogEnd = 786543
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)

        local LatestValue = true
        spawn(function()
            repeat
                wait()
            until _G.FullBrightEnabled
            while wait() do
                if _G.FullBrightEnabled ~= LatestValue then
                    if not _G.FullBrightEnabled then
                        game:GetService("Lighting").Brightness = _G.NormalLightingSettings.Brightness
                        game:GetService("Lighting").ClockTime = _G.NormalLightingSettings.ClockTime
                        game:GetService("Lighting").FogEnd = _G.NormalLightingSettings.FogEnd
                        game:GetService("Lighting").GlobalShadows = _G.NormalLightingSettings.GlobalShadows
                        game:GetService("Lighting").Ambient = _G.NormalLightingSettings.Ambient
                    else
                        game:GetService("Lighting").Brightness = 1
                        game:GetService("Lighting").ClockTime = 12
                        game:GetService("Lighting").FogEnd = 786543
                        game:GetService("Lighting").GlobalShadows = false
                        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
                    end
                    LatestValue = not LatestValue
                end
            end
        end)

        _G.FullBrightExecuted = true
        _G.FullBrightEnabled = not _G.FullBrightEnabled
    end

    -- Infinite Stamina
    local Toggle = Tabs.General:AddToggle("MyInfinite Stamina", {Title = "Infinite Stamina", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:")
    end)

    -- Noclip
    local Toggle = Tabs.General:AddToggle("MyNoclip", {Title = "Noclip", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:")
    end)   

    --Fly
    local Toggle = Tabs.General:AddToggle("MyFly", {Title = "Fly", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:")
    end)

    -- Refresh
    Tabs.General:AddButton({
        Title = "Refresh",
        Description = "This button will refresh your character.",
        Callback = function()
            Window:Dialog({
                Title = "Reset",
                Content = "Are you sure you want to refresh?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    -- Player Properties
    local section = Tabs.General:AddSection("Player Properties")

    -- Reset
    Tabs.General:AddButton({
        Title = "Reset",
        Description = "This button will reset your settings to their original state.",
        Callback = function()
            Window:Dialog({
                Title = "Reset",
                Content = "Are you sure you want to reset the settings?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    -- player speed
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "player speed",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

    -- jump power
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "jump power",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

    -- filght speed
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "filght speed",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

    -- field of view
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "field of view",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

-- Settings
    local httpService = game:GetService("HttpService")

    local InterfaceManager = {} do
        InterfaceManager.Folder = "FluentSettings"
        InterfaceManager.Settings = {
            Theme = "Dark",
            Acrylic = true,
            Transparency = true,
            MenuKeybind = "LeftControl"
        }

        function InterfaceManager:SetFolder(folder)
            self.Folder = folder;
            self:BuildFolderTree()
        end

        function InterfaceManager:SetLibrary(library)
            self.Library = library
        end

        function InterfaceManager:BuildFolderTree()
            local paths = {}

            local parts = self.Folder:split("/")
            for idx = 1, #parts do
                paths[#paths + 1] = table.concat(parts, "/", 1, idx)
            end

            table.insert(paths, self.Folder)
            table.insert(paths, self.Folder .. "/settings")

            for i = 1, #paths do
                local str = paths[i]
                if not isfolder(str) then
                    makefolder(str)
                end
            end
        end

        function InterfaceManager:SaveSettings()
            writefile(self.Folder .. "/options.json", httpService:JSONEncode(InterfaceManager.Settings))
        end

        function InterfaceManager:LoadSettings()
            local path = self.Folder .. "/options.json"
            if isfile(path) then
                local data = readfile(path)
                local success, decoded = pcall(httpService.JSONDecode, httpService, data)

                if success then
                    for i, v in next, decoded do
                        InterfaceManager.Settings[i] = v
                    end
                end
            end
        end

        function InterfaceManager:BuildInterfaceSection(tab)
            assert(self.Library, "Must set InterfaceManager.Library")
            local Library = self.Library
            local Settings = InterfaceManager.Settings

            InterfaceManager:LoadSettings()

            local section = tab:AddSection("Interface")

            local InterfaceTheme = section:AddDropdown("InterfaceTheme", {
                Title = "Theme",
                Description = "Changes the interface theme.",
                Values = Library.Themes,
                Default = Settings.Theme,
                Callback = function(Value)
                    Library:SetTheme(Value)
                    Settings.Theme = Value
                    InterfaceManager:SaveSettings()
                end
            })

            InterfaceTheme:SetValue(Settings.Theme)
        
            if Library.UseAcrylic then
                section:AddToggle("AcrylicToggle", {
                    Title = "Acrylic",
                    Description = "The blurred background requires graphic quality 8+",
                    Default = Settings.Acrylic,
                    Callback = function(Value)
                        Library:ToggleAcrylic(Value)
                        Settings.Acrylic = Value
                        InterfaceManager:SaveSettings()
                    end
                })
            end
        
            section:AddToggle("TransparentToggle", {
                Title = "Transparency",
                Description = "Makes the interface transparent.",
                Default = Settings.Transparency,
                Callback = function(Value)
                    Library:ToggleTransparency(Value)
                    Settings.Transparency = Value
                    InterfaceManager:SaveSettings()
                end
            })
        
            local MenuKeybind = section:AddKeybind("MenuKeybind", { Title = "Minimize Bind", Default = Settings.MenuKeybind })
            MenuKeybind:OnChanged(function()
                Settings.MenuKeybind = MenuKeybind.Value
                InterfaceManager:SaveSettings()
            end)
            Library.MinimizeKeybind = MenuKeybind
        end
    end

    return InterfaceManager

end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
