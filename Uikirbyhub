local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "The Mimic - Kirby hub ",
    SubTitle = "version 1.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    General = Window:AddTab({ Title = "General", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
}

local Options = Fluent.Options

do
    -- General
    -- Player Actions
    local section = Tabs.General:AddSection("Player Actions")

    -- Function to enable full bright effect
    local function EnableFullBright()
        _G.FullBrightEnabled = true
        game:GetService("Lighting").Brightness = 1
        game:GetService("Lighting").ClockTime = 12
        game:GetService("Lighting").FogEnd = 786543
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
    end

    -- Function to disable full bright effect
    local function DisableFullBright()
        _G.FullBrightEnabled = false
        if _G.NormalLightingSettings then
            local normalSettings = _G.NormalLightingSettings
            game:GetService("Lighting").Brightness = normalSettings.Brightness
            game:GetService("Lighting").ClockTime = normalSettings.ClockTime
            game:GetService("Lighting").FogEnd = normalSettings.FogEnd
            game:GetService("Lighting").GlobalShadows = normalSettings.GlobalShadows
            game:GetService("Lighting").Ambient = normalSettings.Ambient
        end
    end

    -- Add the toggle
    local Toggle = Tabs.General:AddToggle("MyFullbright", {Title = "Fullbright", Default = false })

    -- Event handler for toggle change
    Toggle:OnChanged(function(isEnabled)
        if isEnabled then
            EnableFullBright()
        else
            DisableFullBright()
        end
    end)

    if not _G.FullBrightExecuted then
        _G.FullBrightEnabled = false

        _G.NormalLightingSettings = {
            Brightness = game:GetService("Lighting").Brightness,
            ClockTime = game:GetService("Lighting").ClockTime,
            FogEnd = game:GetService("Lighting").FogEnd,
            GlobalShadows = game:GetService("Lighting").GlobalShadows,
            Ambient = game:GetService("Lighting").Ambient
        }

        game:GetService("Lighting"):GetPropertyChangedSignal("Brightness"):Connect(function()
            if game:GetService("Lighting").Brightness ~= 1 and game:GetService("Lighting").Brightness ~= _G.NormalLightingSettings.Brightness then
                _G.NormalLightingSettings.Brightness = game:GetService("Lighting").Brightness
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Brightness = 1
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("ClockTime"):Connect(function()
            if game:GetService("Lighting").ClockTime ~= 12 and game:GetService("Lighting").ClockTime ~= _G.NormalLightingSettings.ClockTime then
                _G.NormalLightingSettings.ClockTime = game:GetService("Lighting").ClockTime
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").ClockTime = 12
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("FogEnd"):Connect(function()
            if game:GetService("Lighting").FogEnd ~= 786543 and game:GetService("Lighting").FogEnd ~= _G.NormalLightingSettings.FogEnd then
                _G.NormalLightingSettings.FogEnd = game:GetService("Lighting").FogEnd
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").FogEnd = 786543
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("GlobalShadows"):Connect(function()
            if game:GetService("Lighting").GlobalShadows ~= false and game:GetService("Lighting").GlobalShadows ~= _G.NormalLightingSettings.GlobalShadows then
                _G.NormalLightingSettings.GlobalShadows = game:GetService("Lighting").GlobalShadows
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").GlobalShadows = false
            end
        end)

        game:GetService("Lighting"):GetPropertyChangedSignal("Ambient"):Connect(function()
            if game:GetService("Lighting").Ambient ~= Color3.fromRGB(178, 178, 178) and game:GetService("Lighting").Ambient ~= _G.NormalLightingSettings.Ambient then
                _G.NormalLightingSettings.Ambient = game:GetService("Lighting").Ambient
                if not _G.FullBrightEnabled then
                    repeat
                        wait()
                    until _G.FullBrightEnabled
                end
                game:GetService("Lighting").Ambient = Color3.fromRGB(178, 178, 178)
            end
        end)

        _G.FullBrightExecuted = true
    end

    -- Noclip
    local Toggle = Tabs.General:AddToggle("MyNoclip", {Title = "Noclip", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:")
    end)   

    --Fly
    -- Define initial cframe fly speed
    local CFspeed = 50

    -- Function to add commands to the CLI
    local function addcmd(name, aliases, func)
        -- Your implementation of addcmd function
    end

    -- Function to enable cframe fly
    local function enableCFrameFly(speaker)
        -- Full credit to peyton#9148 (apeyton)
        speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
        local Head = speaker.Character:WaitForChild("Head")
        Head.Anchored = true
        if CFloop then CFloop:Disconnect() end
        CFloop = RunService.Heartbeat:Connect(function(deltaTime)
            local moveDirection = speaker.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (CFspeed * deltaTime)
            local headCFrame = Head.CFrame
            local cameraCFrame = workspace.CurrentCamera.CFrame
            local cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
            cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
            local cameraPosition = cameraCFrame.Position
            local headPosition = headCFrame.Position

            local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
            Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
        end)
    end

    -- Function to disable cframe fly
    local function disableCFrameFly(speaker)
        if CFloop then
            CFloop:Disconnect()
            speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
            local Head = speaker.Character:WaitForChild("Head")
            Head.Anchored = false
        end
    end

    -- Function to set cframe fly speed
    local function setCFrameFlySpeed(speed)
        if type(speed) == "number" then
            CFspeed = speed
        end
    end

    -- Adding commands
    addcmd('cframefly', {'cfly'}, enableCFrameFly)
    addcmd('uncframefly', {'uncfly'}, disableCFrameFly)
    addcmd('cframeflyspeed', {'cflyspeed'}, setCFrameFlySpeed)

    -- GUI toggle creation
    local Toggle = Tabs.General:AddToggle("MyCfly", {Title = "Cfly", Default = false })

    -- Function to handle toggle state change
    Toggle:OnChanged(function(isEnabled)
        if isEnabled then
            enableCFrameFly(speaker) -- Assuming you have access to 'speaker' variable
        else
            disableCFrameFly(speaker) -- Assuming you have access to 'speaker' variable
        end
    end)


    -- Infinite Stamina
    Tabs.General:AddButton({
        Title = "Infinite Stamina",
        Description = "This button will refresh your character.",
        Callback = function()
            Window:Dialog({
                Title = "Reset",
                Content = "Are you sure you want to refresh?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    -- Refresh
    Tabs.General:AddButton({
        Title = "Refresh",
        Description = "This button will refresh your character.",
        Callback = function()
            Window:Dialog({
                Title = "Reset",
                Content = "Are you sure you want to refresh?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    -- Player Properties
    local section = Tabs.General:AddSection("Player Properties")

    -- Reset
    Tabs.General:AddButton({
        Title = "Reset",
        Description = "This button will reset your settings to their original state.",
        Callback = function()
            Window:Dialog({
                Title = "Reset",
                Content = "Are you sure you want to reset the settings?",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

    -- player speed
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "player speed",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

    -- jump power
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "jump power",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

    -- filght speed
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "cfly speed",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

    -- field of view
    local Slider = Tabs.General:AddSlider("Slider", {
        Title = "field of view",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)

end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Kirby hub",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
